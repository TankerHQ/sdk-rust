include:
  project: TankerHQ/gitlab-ci-files
  file: /common.yml
  ref: 2022-08-19-248

############
# Workflow #
############

workflow:
  rules:
    # web pipelines for releases only
    - if: $CI_PIPELINE_SOURCE == "web" && ($SDK_RUST_RELEASE_VERSION !~ /\A\d+\.\d+\.\d+(-(alpha|beta)\d+)?\z/ || $SDK_RUST_CARGO_REGISTRY !~ /\A(tanker|tanker-dev)\z/)
      when: never
    # forbid stable releases on registry tanker-dev
    - if: $CI_PIPELINE_SOURCE == "web" && ($SDK_RUST_RELEASE_VERSION =~ /\A\d+\.\d+\.\d+\z/ && $SDK_RUST_CARGO_REGISTRY != "tanker")
      when: never
    - if: !reference [.if-invalid-native-conan-reference, if]
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        CONAN_REMOTE: "artifactory"
    - if: '$CI_MERGE_REQUEST_TITLE =~ /.*\[preview].*/'
      variables:
        CONAN_REMOTE: "artifactory-preview"
    - when: always
      variables:
        CONAN_REMOTE: "artifactory-staging"

###########
# Default #
###########

default:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install
  image: registry.gitlab.com/tankerhq/docker/sdk-rust:latest

##########
# Stages #
##########

stages:
  - prepare
  - check
  - deploy

#############################
# Default settings override #
#############################

.before-script/download-artifacts:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME

#################
# Extend blocks #
#################

.release-artifacts:
  artifacts:
    paths:
      - native/

############
# profiles #
############

.profiles/linux:
  variables:
    TANKER_PROFILES: --profile linux-x86_64

.profiles/windows:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install
    # Powershell doesn't split env variable when expanding it.
    # So, we are using the native syntax to create an array, which will be correctly expanded.
    - $TANKER_PROFILES = "--profile", "windows-x86_64", "shared"

.profiles/windows/artifacts:
  extends:
    - .tags/windows
  before_script:
    - !reference [.profiles/windows, before_script]
    - !reference [.before-script/download-artifacts, before_script]

.profiles/android:
  extends:
    - .tags/linux
  variables:
    TANKER_PROFILES: --profile android-armv8 tanker-static --profile android-x86_64 tanker-static --profile android-x86 tanker-static --profile android-armv7 tanker-static

.profiles/macos/x86_64:
  extends:
    - .tags/macos/x86_64
  variables:
    TANKER_PROFILES: --profile macos-x86_64

.profiles/macos/arm:
  extends:
    - .tags/macos/arm
  variables:
    TANKER_PROFILES: --profile macos-armv8

.profiles/ios/x86_64:
  extends:
    - .tags/macos/x86_64
  variables:
    TANKER_PROFILES: --profile ios-armv8 --profile ios_simulator-x86_64

.profiles/ios/arm:
  extends:
    - .tags/macos/arm
  variables:
    TANKER_PROFILES: --profile ios-armv8 --profile ios_simulator-armv8

######################
# prepare stage #
######################

.rules/prepare:
  rules:
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/deploy-pipeline, rules]

.prepare:
  stage: prepare
  extends:
    - .rules/prepare
    - .release-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE prepare --use-tanker=deployed --tanker-ref=$SDK_NATIVE_LATEST_CONAN_REFERENCE $TANKER_PROFILES

prepare/deployed/linux:
  extends:
    - .profiles/linux
    - .prepare
  tags: !reference [.tags/linux, tags]

prepare/deployed/windows:
  extends:
    - .profiles/windows
    - .prepare
  tags: !reference [.tags/windows, tags]

prepare/deployed/android:
  extends:
    - .profiles/android
    - .prepare
  tags: !reference [.tags/linux, tags]

prepare/deployed/macos/x86_64:
  extends:
    - .profiles/macos/x86_64
    - .prepare

prepare/deployed/macos/arm:
  extends:
    - .profiles/macos/arm
    - .prepare

prepare/deployed/ios/x86_64:
  extends:
    - .profiles/ios/x86_64
    - .prepare

prepare/deployed/ios/arm:
  extends:
    - .profiles/ios/arm
    - .prepare


###############
# check stage #
###############

.check/native-from-sources:
  stage: check
  extends:
    - .rules/native-from-sources
  dependencies: []
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE prepare --use-tanker=same-as-branch $TANKER_PROFILES
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE build --test $TANKER_PROFILES


check/native-from-sources/linux:
  extends:
    - .profiles/linux
    - .check/native-from-sources
  tags: !reference [.tags/compilation-linux, tags]

check/native-from-sources/windows:
  extends:
    - .profiles/windows
    - .check/native-from-sources
  tags: !reference [.tags/compilation-windows, tags]

check/native-from-sources/android:
  extends:
    - .profiles/android
    - .check/native-from-sources
  variables:
    TANKER_PROFILES: --profile android-armv8 tanker-static --profile android-x86_64 tanker-static --profile android-x86 tanker-static --profile android-armv7 tanker-static
  tags: !reference [.tags/compilation-linux, tags]

check/native-from-sources/macos/x86_64:
  extends:
    - .profiles/macos/x86_64
    - .check/native-from-sources
  variables:
    TANKER_PROFILES: --profile macos-x86_64

check/native-from-sources/macos/arm:
  extends:
    - .profiles/macos/arm
    - .check/native-from-sources
  variables:
    TANKER_PROFILES: --profile macos-armv8

check/native-from-sources/ios/x86_64:
  extends:
    - .profiles/ios/x86_64
    - .check/native-from-sources
  variables:
    TANKER_PROFILES: --profile ios-armv8 --profile ios_simulator-x86_64

check/native-from-sources/ios/arm:
  extends:
    - .profiles/ios/arm
    - .check/native-from-sources
  variables:
    TANKER_PROFILES: --profile ios-armv8 --profile ios_simulator-armv8

.rules/check/deployed-native:
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/web/auto, rules]

.check/deployed-native:
  stage: check
  extends:
    - .rules/check/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE build --test $TANKER_PROFILES

check/deployed-native/linux:
  extends:
    - .profiles/linux
    - .check/deployed-native
  needs:
    - prepare/deployed/linux
  tags: !reference [.tags/linux, tags]

check/deployed-native/windows:
  extends:
    - .profiles/windows
    - .check/deployed-native
  needs:
    - prepare/deployed/windows
  tags: !reference [.tags/windows, tags]

check/deployed-native/android:
  extends:
    - .profiles/android
    - .check/deployed-native
  needs:
    - prepare/deployed/android
  tags: !reference [.tags/linux, tags]

check/deployed-native/macos/x86_64:
  extends:
    - .profiles/macos/x86_64
    - .check/deployed-native
  needs:
    - prepare/deployed/macos/x86_64

check/deployed-native/macos/arm:
  extends:
    - .profiles/macos/arm
    - .check/deployed-native
  needs:
    - prepare/deployed/macos/arm

check/deployed-native/ios/x86_64:
  extends:
    - .profiles/ios/x86_64
    - .check/deployed-native
  needs:
    - prepare/deployed/ios/x86_64

check/deployed-native/ios/arm:
  extends:
    - .profiles/ios/arm
    - .check/deployed-native
  needs:
    - prepare/deployed/ios/arm

.check/downstream:
  stage: check
  extends:
    - .before-script/download-artifacts
  dependencies: []
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE prepare --use-tanker=upstream $TANKER_PROFILES
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE build --test $TANKER_PROFILES

check/downstream/linux:
  extends:
    - .rules/check/downstream/linux
    - .check/downstream
    - .profiles/linux
  tags: !reference [.tags/linux, tags]

check/downstream/windows:
  extends:
    - .rules/check/downstream/windows
    - .check/downstream
    - .profiles/windows/artifacts
  tags: !reference [.tags/windows, tags]

check/downstream/android:
  extends:
    - .rules/check/downstream/android
    - .check/downstream
    - .profiles/android
  tags: !reference [.tags/linux, tags]

check/downstream/ios/x86_64:
  extends:
    - .rules/check/downstream/ios
    - .check/downstream
    - .profiles/ios/x86_64

check/downstream/ios/arm:
  extends:
    - .rules/check/downstream/ios
    - .check/downstream
    - .profiles/ios/arm

check/downstream/macos/x86_64:
  extends:
    - .rules/check/downstream/macos/x86_64
    - .check/downstream
    - .profiles/macos/x86_64

check/downstream/macos/arm:
  extends:
    - .rules/check/downstream/macos/arm
    - .check/downstream
    - .profiles/macos/arm

################
# deploy stage #
################

deploy:
  stage: deploy
  extends:
    - .rules/deploy/rust
  script:
    - poetry run python run-ci.py deploy --version $SDK_RUST_RELEASE_VERSION --registry $SDK_RUST_CARGO_REGISTRY
  needs:
    - prepare/deployed/linux
    - prepare/deployed/windows
    - prepare/deployed/android
    - prepare/deployed/macos/x86_64
    - prepare/deployed/macos/arm
    - prepare/deployed/ios/x86_64
    - prepare/deployed/ios/arm
  release:
    description: sdk-rust v$SDK_RUST_RELEASE_VERSION
    tag_name: v$SDK_RUST_RELEASE_VERSION
  tags: !reference [.tags/linux, tags]
